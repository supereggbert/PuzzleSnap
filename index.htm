<!doctype html>
<html>
    
    <head>
        <title>Puzzle Snap</title>
        <link href='http://fonts.googleapis.com/css?family=Rammetto+One'
        rel='stylesheet' type='text/css'>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <style>
            html {
                height: 100%;
            }
            body {
                background-color:#555;
                margin:0;
                padding:0;
                height: 100%;
                background-image: url('background.jpg');
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                x-moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }
            div#outer {
                position:absolute;
                height:100%;
                width:100%;
                display: table;
            }
            div#inner {
                display: table-cell;
                vertical-align: middle;
                text-align:center;
                background: -moz-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.65) 100%);
                background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, rgba(0, 0, 0, 0.1)), color-stop(100%, rgba(0, 0, 0, 0.65)));
                background: -webkit-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.65) 100%);
                background: -o-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.65) 100%);
                background: -ms-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.65) 100%);
                background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.65) 100%);
            }
            h1 span {
                font-family:'Rammetto One', cursive;
                font-size: 42px;
                margin: 0px;
                padding: 0px 0px 25px 0px;
                -moz-transform: rotate(-7deg);
                -webkit-transform: rotate(-7deg);
                -ms-transform: rotate(-7deg);
                -o-transform: rotate(-7deg);
                -transform: rotate(-7deg);
                line-height: 30px;
                width: 280px;
                display: inline-block;
                color: #9badcc;
                text-shadow: 0px 1px 1px #000, 0px -1px 1px #fff, 0px 0px 20px #000, 0px 0px 30px #000;
            }
            #title {
                position: relative;
                width: 280px;
                margin: auto;
            }
            #title p {
                position: absolute;
                left: 130px;
                top: 70px;
                margin: 0px;
                padding: 0px;
                color: #888;
            }
            p {
                font-weight: bold;
                color: #777;
                text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.5);
                font-family: arial, sans;
                text-align: center;
                font-weight: normal;
            }
            a {
                color: #aaa;
                font-weight: bold;
                text-decoration: none;
                font-size: 13px;
            }
            .button {
                position: relative;
                width: 200px;
                margin: 10px auto;
                cursor: pointer;
                font-family: Arial, Helvetica, sans-serif;
                font-size: 20px;
                color: #ffffff;
                padding: 10px 20px;
            }
            .button {
                background-color: #a5b8da;
                background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #a5b8da), color-stop(100%, #7089b3));
                background-image: -webkit-linear-gradient(top, #a5b8da, #7089b3);
                background-image: -moz-linear-gradient(top, #a5b8da, #7089b3);
                background-image: -ms-linear-gradient(top, #a5b8da, #7089b3);
                background-image: -o-linear-gradient(top, #a5b8da, #7089b3);
                background-image: linear-gradient(top, #a5b8da, #7089b3);
                border-top: 1px solid #758fba;
                border-right: 1px solid #6c84ab;
                border-bottom: 1px solid #5c6f91;
                border-left: 1px solid #6c84ab;
                -webkit-border-radius: 18px;
                -moz-border-radius: 18px;
                -o-border-radius: 18px;
                -ms-border-radius: 18px;
                border-radius: 18px;
                color: #fff;
                font: bold 18px"Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Verdana, sans-serif;
                text-align: center;
                text-shadow: 0 -1px 1px #64799e;
                -webkit-box-shadow: 0px -1px 1px #000, 0px 1px 1px #fff;
                -moz-box-shadow: 0px -1px 1px #000, 0px 1px 1px #fff;
                -o-box-shadow: 0px -1px 1px #000, 0px 1px 1px #fff;
                -ms-box-shadow: 0px -1px 1px #000, 0px 1px 1px #fff;
                box-shadow: 0px -1px 1px #000, 0px 1px 1px #fff;
		overflow: hidden;
            }
            .button:hover {
                background-color: #9badcc;
                background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #9badcc), color-stop(100%, #687fa6));
                background-image: -webkit-linear-gradient(top, #9badcc, #687fa6);
                background-image: -moz-linear-gradient(top, #9badcc, #687fa6);
                background-image: -ms-linear-gradient(top, #9badcc, #687fa6);
                background-image: -o-linear-gradient(top, #9badcc, #687fa6);
                background-image: linear-gradient(top, #9badcc, #687fa6);
                border-top: 1px solid #6d86ad;
                border-right: 1px solid #647a9e;
                border-bottom: 1px solid #546685;
                border-left: 1px solid #647a9e;
            }
	    .button *{
                cursor: pointer;
	    }
            .button input {
		position: absolute;
		opacity: 0;
		top: -1000px;
            }
            canvas {
                display: none;
                margin: auto;
            }
	  #submessage{
                display: none;
	  }
        </style>
    </head>
    
    <body>
        <div id="outer">
            <div id="inner">
                <div id="title">
                    
		<h1><span>Puzzle Snap</span></h1>

                    <p>by <a href="http://www.twitter.com/supereggbert">@supereggbert</a>
                    </p>
                </div>
                <canvas id="canvas" width="250" height="250"></canvas>
                <div id="menu">
                    <p>Choose your destiny</p>
                    <div class="button" id="takesnap1">
                        <input type="file" id="pic1" accept="image/*">Lame</div>
                    <div class="button" id="takesnap2">
                        <input type="file" id="pic2" accept="image/*">Meh!</div>
                    <div class="button" id="takesnap3">
                        <input type="file" id="pic3" accept="image/*">OMG</div>
                    <div class="button" id="takesnap4">
                        <input type="file" id="pic4" accept="image/*">*!!@*!#</div>
                </div>
                <p id="submessage">Rearrange the squares to recreate your snap</p>
            </div>
        </div>
        <script>
            //request animation polyfill from http://paulirish.com/2011/requestanimationframe-for-smart-animating/
            (function () {
                var lastTime = 0;
                var vendors = ['ms', 'moz', 'webkit', 'o'];
                for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
                    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
                }
                if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
                    var currTime = new Date().getTime();
                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                    var id = window.setTimeout(function () {
                        callback(currTime + timeToCall);
                    },
                    timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };
                if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
                    clearTimeout(id);
                };
            }());
            var men = document.getElementById("menu");
            var submessage = document.getElementById("submessage");
            var dobutton = function (id, id2, size) {
                var pic = document.getElementById(id);
		
	    document.getElementById(id2).onmousedown=function(){
		pic.click();
	     }
                pic.onchange = function (event) {
                    var files = event.target.files;
                    var file;
                    if (files && files.length > 0) {
                        file = files[0];
                    }
                    var URL = window.URL || window.webkitURL;
                    var imgURL = URL.createObjectURL(file);
                    var grid = new GameGrid(size, size);
                    var controler = new GridControler(grid, canvas);
                    grid.setImage(imgURL);
                    canvas.style.display = "block";
                    menu.style.display = "none";
		    submessage.style.display = "block";
                };
            };
            dobutton("pic1","takesnap1", 3);
            dobutton("pic2","takesnap2", 4);
            dobutton("pic3","takesnap3", 5);
            dobutton("pic4","takesnap4", 6);
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            ctx.scale(canvas.width, canvas.height);
            var GridSquare = function (offsetX, offsetY, startX, startY, width, height) {
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                this.startX = startX;
                this.startY = startY;
                this.width = width;
                this.height = height;
                this.scale = 0;
                this.targetScale = 0;
            };
            var GameGrid = function (width, height) {
                this.width = width;
                this.height = height;
                this.grid = [];
                for (var y = 0; y < height; y++) {
                    var row = [];
                    for (var x = 0; x < width; x++) {
                        row.push(new GridSquare(0, 0, x / width, y / height, 1 / width, 1 / height));
                    }
                    this.grid.push(row);
                }
                this.randomize();
                var that = this;
                var anim = function () {
                    that.animate();
                    that.render();
                    requestAnimationFrame(anim);
                };
                requestAnimationFrame(anim);
            };
            GameGrid.prototype.selectedIdx = 0;
            GameGrid.prototype.selectMode = 0;
            GameGrid.prototype.selectOffset = 0;
            GameGrid.prototype.gridPadding = 0.02;
            GameGrid.prototype.rotation = 0;
            GameGrid.prototype.easeSpeed = 7;
            GameGrid.prototype.startSelection = function (mode, idx) {
                this.selectMode = mode;
                this.selectedIdx = idx;
                if (mode == 1) {
                    var len = this.grid[0].length;
                    for (var x = 0; x < len; x++) {
                        this.grid[idx][x].targetScale = 1;
                    }
                } else if (mode == 2) {
                    var len = this.grid.length;
                    for (var y = 0; y < len; y++) {
                        this.grid[y][idx].targetScale = 1;
                    }
                }
                return this;
            };
            GameGrid.prototype.randomize = function () {
                var grid = this.grid;
                for (var j = 0; j < 20; j++) {
                    var newline = [];
                    if (Math.random() > 0.5) {
                        var offset = Math.floor(Math.random() * 10);
                        var idx = Math.floor(Math.random() * grid.length);
                        for (var i = 0; i < grid[idx].length; i++) {
                            newline.push(grid[idx][(i + offset) % grid[idx].length]);
                        }
                        for (var i = 0; i < grid[idx].length; i++) {
                            grid[idx][i] = newline[i];
                        }
                    } else {
                        var offset = Math.floor(Math.random() * 10);
                        var idx = Math.floor(Math.random() * grid[0].length);
                        for (var i = 0; i < grid.length; i++) {
                            newline.push(grid[(i + offset) % grid[0].length][idx]);
                        }
                        for (var i = 0; i < grid.length; i++) {
                            grid[i][idx] = newline[i];
                        }
                    }
                }
            };
            GameGrid.prototype.endSelection = function () {
                var offsetWrap = -(this.selectOffset) % 1;
                if (this.selectMode == 1) {
                    var newx = [];
                    var offsetX = offsetWrap * this.width;
                    var len = this.grid[0].length;
                    for (var x = 0; x < len; x++) {
                        newx[x] = this.grid[this.selectedIdx][(x + Math.round(offsetX) + len) % len];
                    }
                    for (var x = 0; x < len; x++) {
                        this.grid[this.selectedIdx][x] = newx[x];
                        this.grid[this.selectedIdx][x].offsetX = Math.round(offsetX) / this.width - offsetWrap;
                        this.grid[this.selectedIdx][x].targetScale = 0;
                    }
                } else if (this.selectMode == 2) {
                    var newy = [];
                    var offsetY = offsetWrap * this.width;
                    var len = this.grid.length;
                    for (var y = 0; y < len; y++) {
                        newy[y] = this.grid[(y + Math.round(offsetY) + len) % len][this.selectedIdx];
                    }
                    for (var y = 0; y < len; y++) {
                        this.grid[y][this.selectedIdx] = newy[y];
                        this.grid[y][this.selectedIdx].offsetY = Math.round(offsetY) / this.height - offsetWrap;
                        this.grid[y][this.selectedIdx].targetScale = 0;
                    }
                }
                this.selectMode = 0;
                return this;
            };
            GameGrid.prototype.setOffset = function (offset) {
                this.selectOffset = offset;
                return this;
            };
            GameGrid.prototype.animate = function () {
                var now = +new Date;
                if (this.lastTime) {
                    var grid = this.grid;
                    var dt = (now - this.lastTime) / 1000;
                    dt = Math.min(dt, 0.04);
                    for (var y = 0; y < this.height; y++) {
                        for (var x = 0; x < this.width; x++) {
                            grid[y][x].offsetX -= grid[y][x].offsetX * this.easeSpeed * dt;
                            grid[y][x].offsetY -= grid[y][x].offsetY * dt * this.easeSpeed;
                            grid[y][x].scale -= (grid[y][x].scale - grid[y][x].targetScale) * dt * this.easeSpeed;
                        }
                    }
                }
                this.lastTime = now;
            };
            GameGrid.prototype.setImage = function (url) {
                var that = this;
                this.imgLoaded = false;
                var img = new Image;
                img.onload = function () {
                    that.imgLoaded = true;
                    var canvas = document.createElement("canvas");
                    canvas.height = 250;
                    canvas.width = 250;
                    var ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0, 250, 250);
                    that.img = canvas;
                };
                img.src = url;
                return this;
            };
            GameGrid.prototype.render = function () {
                ctx.clearRect(0, 0, 1, 1);
                var grid = this.grid;
                var ypadding = grid.length * this.gridPadding;
                var ywidth = (1 - ypadding) / grid.length;
                var xpadding = grid[0].length * this.gridPadding;
                var xwidth = (1 - xpadding) / grid[0].length;
                var halfPadding = this.gridPadding / 2;
                for (var y = 0; y < grid.length * 2; y++) {
                    var iy = y % grid.length;
                    for (var x = 0; x < grid[iy].length * 2; x++) {
                        var ix = x % grid[iy].length;
                        var xstart = x * (this.gridPadding + xwidth) + halfPadding + grid[iy][ix].offsetX;
                        var ystart = y * (this.gridPadding + ywidth) + halfPadding + grid[iy][ix].offsetY;
                        if (this.selectMode == 1 && this.selectedIdx == y) {
                            xstart += this.selectOffset;
                        }
                        if (this.selectMode == 2 && this.selectedIdx == x) {
                            ystart += this.selectOffset;
                        }
                        var scale = this.gridPadding * grid[iy][ix].scale * 0.5;
                        xstart = ((xstart + xwidth) % 2) - xwidth;
                        if (xstart < -1) xstart += 2;
                        ystart = ((ystart + ywidth) % 2) - ywidth;
                        if (ystart < -1) ystart += 2;
                        if (this.imgLoaded) {
                            ctx.drawImage(this.img,
                            this.img.width * grid[iy][ix].startX, this.img.height * grid[iy][ix].startY, this.img.width * grid[iy][ix].width, this.img.height * grid[iy][ix].height,
                            xstart - scale, ystart - scale, xwidth + scale, ywidth + scale);
                        }
                    }
                }
            };
            var GridControler = function (grid, canvas) {
                this.canvas = canvas;
                this.grid = grid;
                var getOffset = function (child) {
                    var offsetX = 0;
                    var offsetY = 0;
                    while (child.offsetParent) {
                        offsetX += child.offsetLeft;
                        offsetY += child.offsetTop;
                        child = child.offsetParent;
                    }
                    offsetX += child.offsetLeft;
                    offsetY += child.offsetTop;
                    return [offsetX, offsetY];
                };
                var drag = false;
                var mousedown = function (e) {
                    if (e.touches) {
                        e.clientX = e.touches[0].pageX
                        e.clientY = e.touches[0].pageY
                    }
                    drag = [e.clientX, e.clientY];
                };
                var mousemove = function (e) {
                    if (e.touches) {
                        e.clientX = e.touches[0].pageX
                        e.clientY = e.touches[0].pageY
                    }
                    if (drag) {
                        var eleOffset = getOffset(e.target);
                        var dx = e.clientX - drag[0];
                        var dy = e.clientY - drag[1];
                        if (grid.selectMode == 0 && (Math.abs(dx) > 10 || Math.abs(dy) > 10)) {
                            var xIdx = Math.max(0, Math.floor((e.clientX - eleOffset[0]) / canvas.offsetWidth * grid.width));
                            var yIdx = Math.max(0, Math.floor((e.clientY - eleOffset[1]) / canvas.offsetHeight * grid.height));
                            if (Math.abs(dx) > Math.abs(dy)) {
                                grid.startSelection(1, yIdx);
                            } else {
                                grid.startSelection(2, xIdx);
                            }
                        }
                        var offset = (grid.selectMode == 1 ? dx / canvas.offsetWidth : dy / canvas.offsetHeight);
                        grid.setOffset(offset);
                    }
                    e.preventDefault();
                };
                var mouseup = function (e) {
                    grid.endSelection();
                    drag = false;
                };
                canvas.addEventListener("mousedown", mousedown, false);
                canvas.addEventListener("mousedown", mousedown, false);
                canvas.addEventListener('touchstart', mousedown, false);
                document.addEventListener("mousemove", mousemove, false);
                document.addEventListener('touchmove', mousemove, false);
                document.addEventListener("mouseup", mouseup, false);
                document.addEventListener("touchend", mouseup, false);
            };
        </script>
    </body>

</html>